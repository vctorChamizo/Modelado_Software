package Integracion.Venta;

import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;


import Integracion.Excepciones.ExcepcionIntegracion;
import Integracion.Transacciones.GestorTransacciones;
import Negocio.Venta.VentaTrans;

public class VentaDaoImp implements VentaDao {

	
	/*
	public static void main(String[] args) {
		
		try {
			
			Transaccion t = GestorTransacciones.getInstancia().nuevaTransaccion();
			t.start();
			
			VentaTrans v = new VentaTrans("1981-11-12",10,6);
			VentaDaoImp ve = new VentaDaoImp();
			
			int id = ve.crearVenta(v);
			
			t.commit();
			
			VentaTrans p = ve.buscarVentaPorId(id);
			//ve.borrarVenta(p.getId());
			
			t.commit();
			v = new VentaTrans(8,"1777-11-12",8,7);
			
			ve.modificarVenta(v);
			t.commit();
			
			ArrayList<VentaTrans> listaVe = ve.listarVentas();
			
			t.commit();
		} 
		
		catch (ExcepcionIntegracion e) {

			e.printStackTrace();
		}
		
	}//main de prueba Venta Integracion
	*/
	
	
	
	/**
	 * transforma string en java.sql.Date
	 * @param fecha
	 * @return
	 * @throws ExcepcionIntegracion 
	 */
	private Date stringToSQLDate(String fecha){
		
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-DD");
		java.util.Date date=null;
		
		try {
			
			date = formatter.parse(fecha);
		} 
		
		catch (ParseException e) {

			return null;
		}
		
		return new Date(date.getTime());
		
	}//stringToSQLDate
	
	
	//************************************************************************************************************

	
	public int crearVenta(VentaTrans venta) throws ExcepcionIntegracion {
	
		int id;
		
		
		try {
			
			Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
			java.sql.PreparedStatement ps=conexion.prepareStatement("INSERT INTO `venta`( `fecha`, `total`, `cliente`) VALUES (?,?,?)",Statement.RETURN_GENERATED_KEYS);
				
			ps.setDate(1,stringToSQLDate(venta.getFecha()));
			ps.setDouble(2, venta.getTotal());
			ps.setInt(3, venta.getIdCliente());
				
			ps.executeUpdate();
			
			ResultSet rs= ps.getGeneratedKeys();
			rs.next();
			id = rs.getInt(1);
			
			ps.close();
		} 
		
		catch (SQLException e) {
			
			throw new ExcepcionIntegracion("Error al crear la venta.");
		}
		
		return id;
		
	}


	//************************************************************************************************************

	
	public VentaTrans buscarVentaPorId(int id) throws ExcepcionIntegracion {
		
		try {
			
			Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
			java.sql.PreparedStatement ps=conexion.prepareStatement("SELECT * from `venta` where `venta`.`id`=? FOR UPDATE");
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			
			if(rs.next()){
				
				VentaTrans v = new VentaTrans(rs.getInt("id"),rs.getDate("fecha").toString(),rs.getDouble("total"),rs.getInt("cliente"), rs.getBoolean("activo"));
				
				rs.close();
				return v;
			}
		} 
		
		catch (SQLException e) {
			
			throw new ExcepcionIntegracion("Error al buscar la venta.");

		}
		
		return null;
		
	}//bucarVentaPorId

	
	//************************************************************************************************************

	
	public void borrarVenta(int id) throws ExcepcionIntegracion {
		
	/*	Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
		
		try {
			
			PreparedStatement ps=conexion.prepareStatement("DELETE FROM `venta` WHERE `venta`.`id` =?");
			ps.setInt(1, id);	
			ps.executeUpdate();
			ps.close();
		} 
		
		catch (SQLException e) {
			
			throw new ExcepcionIntegracion("Error al buscar la venta.");
		}*/
		
	}

	
	//************************************************************************************************************

	
	public void modificarVenta(VentaTrans venta) throws ExcepcionIntegracion {
		
		PreparedStatement ps;
		
		try{
			
			Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
			//TESTEADA A FALTA DE AÑADIR EL CAMPO ACTIVO A VENTA TRANS Y A LA BBDD.
			ps = conexion.prepareStatement("UPDATE venta SET fecha = ?, total = ?, cliente = ?, activo = ? WHERE id = ?");

			ps.setDate(1, stringToSQLDate(venta.getFecha()));
			ps.setDouble(2, venta.getTotal());
			ps.setInt(3, venta.getIdCliente());
			ps.setBoolean(4, venta.getActivo());
			ps.setInt(5, venta.getId());
				
			ps.executeUpdate();
			ps.close();	
		}
		
		catch(SQLException e){
			
			throw new ExcepcionIntegracion("Error al modificar la venta.");

		}
	
	}//modificarVenta

	
	//************************************************************************************************************

	
	public ArrayList<VentaTrans> listarVentas() throws ExcepcionIntegracion {

		ArrayList<VentaTrans> lista = new ArrayList<VentaTrans>();
		
		VentaTrans venta;
		
		PreparedStatement ps;
		
		try{
			
			Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
			
			ps = conexion.prepareStatement("SELECT * FROM venta ORDER BY fecha FOR UPDATE");
			
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()){
				
				venta = new VentaTrans(rs.getInt("id"), rs.getString("fecha"), 
						rs.getInt("total"), rs.getInt("cliente"), rs.getBoolean("activo"));
				
				lista.add(venta);
			}
			
			ps.close();
		}
		
		catch(SQLException e){
			
			throw new ExcepcionIntegracion("Error al listar las ventas.");

		}
		
		return lista;
		
		
	}//listarVentas


	@Override
	public VentaTrans buscarVentaPorFecha(String fecha) throws ExcepcionIntegracion {
		
		try {
			
			Connection conexion = (Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
			java.sql.PreparedStatement ps=conexion.prepareStatement("SELECT * from `venta` where `venta`.`fecha`=? FOR UPDATE");
			
			ps.setDate(1, stringToSQLDate(fecha));
			ResultSet rs = ps.executeQuery();
			
			if(rs.next()){
				
				VentaTrans v = new VentaTrans(rs.getInt("id"), rs.getDate("fecha").toString(),rs.getDouble("total"),rs.getInt("cliente"), rs.getBoolean("activo"));
				
				rs.close();
				return v;
			}
		} 
		
		catch (SQLException e) {
			
			throw new ExcepcionIntegracion("Error al buscar la venta.");

		}
		
		return null;
		
	}
	
	
	
}//VentaDAOImp


