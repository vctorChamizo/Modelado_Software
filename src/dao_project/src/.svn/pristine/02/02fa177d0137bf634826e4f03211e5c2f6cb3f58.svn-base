package Integracion.Cliente;

import java.sql.*;
import java.util.ArrayList;

import Integracion.Transacciones.GestorTransacciones;
import Negocio.Cliente.ClienteTrans;
import Negocio.Cliente.EmpresaTrans;
import Negocio.Cliente.ParticularTrans;


public class ClienteDaoImp implements ClienteDao{
	
	public int crearCliente(ClienteTrans cliente) {

		PreparedStatement ps;
		
		int id_create = 0;
		
		try{
			Connection conexion = (Connection)GestorTransacciones.getInstancia().getTransaccion().getResource();
			ps = conexion.prepareStatement("INSERT INTO cliente (nombre, telefono, email, dni, activo) "
			+ "VALUES(?, ?, ?, ?, 1)");
			ps.setString(1, cliente.getNombre());
			ps.setString(2, cliente.getTelefono());
			ps.setString(3, cliente.getEmail());
			ps.setString(4, cliente.getDni());
			id_create = ps.executeUpdate();
			ps.close();
			if(cliente instanceof EmpresaTrans){
				ps = conexion.prepareStatement("INSERT INTO empresa (idEmpresa, sector) "
				+ "VALUES(?, ?)");
				ps.setInt(1, id_create);
				ps.setString(2, ((EmpresaTrans) cliente).getSector());
				id_create = ps.executeUpdate();
				conexion.close();
				ps.close();
			}
			else{
				ps = conexion.prepareStatement("INSERT INTO particular (idParticular, apellido) "
				+ "VALUES(?, ?)");
				ps.setInt(1, id_create);
				ps.setString(2,((ParticularTrans) cliente).getApellido());
				id_create = ps.executeUpdate();
				conexion.close();
				ps.close();
			}
		}

		catch (SQLException e){	
			
			System.err.println("Error al crear el cliente");
			e.printStackTrace();
		}
		
		return id_create;
		 
	}//crearProducto

	
	//************************************************************************************************************


	public void modificarCliente(ClienteTrans cliente) {
		
		PreparedStatement ps;
		
		try {
			Connection conexion = (Connection)GestorTransacciones.getInstancia().getTransaccion().getResource();
			ps = conexion.prepareStatement("UPDATE cliente SET nombre = ?, telefono = ?, email = ?, dni = ?, activo = ? " + "WHERE id = ?");
	 
				
			ps.setString(1, cliente.getNombre());
			ps.setString(2, cliente.getTelefono());
			ps.setString(3, cliente.getEmail());
			ps.setString(4, cliente.getDni());
			ps.setBoolean(5, cliente.getActivo());
			ps.setInt(6, cliente.getId());
			ps.executeUpdate();
			ps.close();
			
			if(cliente instanceof EmpresaTrans){
				ps = conexion.prepareStatement("UPDATE empresa SET sector = ? WHERE idEmpresa = ?");
				ps.setString(1, ((EmpresaTrans) cliente).getSector());
				ps.setInt(2, cliente.getId());
				ps.executeUpdate();
				ps.close();
				conexion.close();
			}
			else{
				ps = conexion.prepareStatement("UPDATE particular SET apellido = ? WHERE idParticular = ?");
				ps.setString(1, ((ParticularTrans) cliente).getApellido());
				ps.setInt(2, cliente.getId());
				ps.executeUpdate();
				ps.close();
				conexion.close();
			}
			
		} catch (SQLException e) {
			
			System.err.println("Error al modificar el cliente");

		}

		
	}//modificar Producto

	
	//************************************************************************************************************

	
	public int borrarCliente(int id) {
		
		int num = 0;
		PreparedStatement ps;
		
		try {
			Connection conexion = (Connection)GestorTransacciones.getInstancia().getTransaccion().getResource();
			ps = conexion.prepareStatement("UPDATE producto SET activo = 0 WHERE id = ?");
		 
			ps.setInt(1, id);
			num = ps.executeUpdate();
			ps.close();
		} 
		
		catch (SQLException e) {
			
			System.err.println("Error al borrar el cliente");

		}
		
		return num;// > 0;
		
	}//borrarProducto
	
	
	//************************************************************************************************************

	
	public boolean activarCliente(int id){
		
		int num = 0;
		PreparedStatement ps;
		
		try {
			Connection conexion = (Connection)GestorTransacciones.getInstancia().getTransaccion().getResource();
			ps = conexion.prepareStatement("UPDATE producto SET activo = 1 WHERE id = ?");
		 
			ps.setInt(1, id);
			num = ps.executeUpdate();
			ps.close();
		} 
		
		catch (SQLException e) {
			
			System.err.println("Error al activar el cliente");

		}
		
		return num > 0;
	}
	
	@Override
	public ArrayList<ParticularTrans> listarParticulares(){
		
		ParticularTrans particular = null;
		ArrayList<ParticularTrans> read = new ArrayList<ParticularTrans>();
		PreparedStatement ps;
		
		try {
			
			
			Connection conexion = (Connection)GestorTransacciones.getInstancia().getTransaccion().getResource();
			ps = conexion.prepareStatement("SELECT * FROM cliente ORDER BY id FOR UPDATE");
			 
			ResultSet rs = ps.executeQuery();
			
			while (rs.next()){
				
				particular = new ParticularTrans(rs.getInt("id"), rs.getString("nombre"),

										rs.getString("telefono"), rs.getString("email"),
						
										rs.getString("DNI"), rs.getBoolean("activo"), rs.getNString("apellido"));
				
				read.add(particular);
			}
			
			ps.close();
			
			
		}catch(SQLException e) {
			
			System.err.println("Error al listar particulares");
		} 
		
		return read;	
	}

@Override
public ArrayList<ClienteTrans> listarClientes(){
	
	ClienteTrans cliente = null;
	ArrayList<ClienteTrans> read = new ArrayList<ClienteTrans>();
	PreparedStatement ps;
	
	try {
		
		
		Connection conexion = (Connection)GestorTransacciones.getInstancia().getTransaccion().getResource();
		ps = conexion.prepareStatement("SELECT * FROM cliente ORDER BY id FOR UPDATE");
		 
		ResultSet rs = ps.executeQuery();
		
		while (rs.next()){
			
			cliente = new ClienteTrans(rs.getInt("id"), rs.getString("nombre"),

									rs.getString("telefono"), rs.getString("email"),
					
									rs.getString("DNI"), rs.getBoolean("activo"));
			
			read.add(cliente);
		}
		
		ps.close();
		
		
	}catch(SQLException e) {
		
		System.err.println("Error al listar los clientes");
	} 
	
	return read;	
}

@Override
public ArrayList<EmpresaTrans> listarEmpresas(){
	
	EmpresaTrans empresa = null;
	ArrayList<EmpresaTrans> read = new ArrayList<EmpresaTrans>();
	PreparedStatement ps;
	
	try {
		
		
		Connection conexion = (Connection)GestorTransacciones.getInstancia().getTransaccion().getResource();
		ps = conexion.prepareStatement("SELECT * FROM cliente ORDER BY id FOR UPDATE");
		 
		ResultSet rs = ps.executeQuery();
		
		while (rs.next()){
			
			empresa = new EmpresaTrans(rs.getInt("id"), rs.getString("nombre"),

									rs.getString("telefono"), rs.getString("email"),
					
									rs.getString("DNI"), rs.getBoolean("activo"), rs.getString("sector"));
			
			read.add(empresa);
		}
		
		ps.close();
		
		
	}catch(SQLException e) {
		
		System.err.println("Error al listar las empresas");
	} 
	
	return read;	
}

@Override
public ClienteTrans buscarCliente(int id){
	ClienteTrans cliente = null;
	PreparedStatement ps;
	
	try {
		
		Connection conexion = (Connection)GestorTransacciones.getInstancia().getTransaccion().getResource();
		ps = conexion.prepareStatement("SELECT * FROM cliente WHERE id = ? FOR UPDATE");
		
		ps.setInt(1, id);
		ResultSet rs = ps.executeQuery();
		
		if(rs.next()){
			
			cliente = new ClienteTrans(rs.getInt("id"), rs.getString("nombre"),

					rs.getString("telefono"), rs.getString("email"),
	
					rs.getString("DNI"), rs.getBoolean("activo"));
		}
		
		ps.close();
		
	}catch(SQLException e) {
		System.err.println("Error al buscar el cliente");
		
	}
	
	return cliente;	
}
	
}

