package Presentacion.Vistas.VistaPrincipal;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import Negocio.Producto.ProductoTrans;
import Presentacion.Contexto.Contexto;
import Presentacion.Controlador.Controlador;
import Presentacion.Vistas.Productos.ActualizarFrame_Productos;
import Presentacion.Vistas.Productos.AnadirFrame_Productos;
import Presentacion.Vistas.Productos.ProductosGUI;
import Presentacion.Vistas.Ventas.VentasGUI;

public class MainGUI extends JFrame{

	private static final long serialVersionUID = 361589142254011987L;
	
	
	private JPanel mainPanel;
	
	private boolean haveConexion;
	
	private ArrayList<?> lista;
	
	private JPanel aPanel;
	
	private JPanel tPanel;
	
	private JButton aButton;
	
	private JButton tButton;
	
	public enum typeCliente{
		
		PARTICULAR, EMPRESA
	};
	
	/**
	 * Constructor.
	 * 
	 * Instancia el controlador de la aplicacion.
	 */
	public MainGUI(){
		
		//Controlador.getInstancia().addObserver(this);
		
		//this.haveConexion = haveConexion;
		
		initGUI();
		
	}//MainGUI
	
	
	
	/**
	 * Agrega todas las componentes Swing necesarias para crear el Frame principal donde iran alojadas las vistas de los modulos.
	 */
	private void initGUI() {
		 
			this.addWindowListener(new WindowListener(){
	
				//Se invoca cuando el usuario intenta cerrar la ventana.
				@Override
				public void windowClosing(WindowEvent e) {
	
					int n = JOptionPane.showOptionDialog(new JPanel(), "¿Estas seguro de cerrar la aplicacion?", "Cerrar",
							JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
	
					if (n == 0){
						
						System.gc();
						
						System.exit(0);
					}
				}
	
				//Se invoca cuando la ventana se ajusta para que sea la ventana activa.
				@Override
				public void windowActivated(WindowEvent e) {
				}
	
				//Se invoca cuando una ventana se ha cerrado como el resultado de llamar a disponer en la ventana.
				@Override
				public void windowClosed(WindowEvent e) {
				}
				
				//Se invoca cuando una ventana ya no es la ventana activa.
				@Override
				public void windowDeactivated(WindowEvent e) {
				}
	
				//Se invoca cuando se cambia una ventana de una minimizada a un estado normal.
				@Override
				public void windowDeiconified(WindowEvent e) {
				}
	
				//Se invoca cuando se cambia una ventana desde un estado normal a un estado minimizado.
				@Override
				public void windowIconified(WindowEvent e) {
				}
	
				//Se invoca la primera vez que una ventana se hace visible.
				@Override
				public void windowOpened(WindowEvent e) {
				}			
			});
			
	//**************************************************************************************************************************	
	//**************************************************************************************************************************	
			
		//MAIN PANEL
			
		mainPanel = new JPanel();
		mainPanel.setLayout(new BorderLayout());
		mainPanel.setOpaque(true);
			
			
	//**************************************************************************************************************************	

		JPanel westPanel = new JPanel();
		westPanel.setBackground(MainGUI.getBackgroundColor());
		westPanel.setBorder(BorderFactory.createCompoundBorder(
			
			BorderFactory.createMatteBorder(0, 0, 0, 2, Color.WHITE), 
			
			BorderFactory.createMatteBorder(5, 5, 5, 5, MainGUI.getBackgroundColor())
		));
		
			westPanel.setLayout(new GridLayout(2,1));
		
			
			//PARTE DE TIENDA
				
			tPanel = new JPanel(new BorderLayout());
				tPanel.setPreferredSize(new Dimension(110, 120));
				tPanel.setBorder(BorderFactory.createLineBorder(MainGUI.getBackgroundColor(),4));
				
				tButton = new JButton(new ImageIcon("src/Presentacion/Icons/tienda.png"));
					tButton.setBackground(new Color(210,210,210));
					tButton.setFont(new Font("Arial", Font.BOLD, 14));
					tButton.setForeground(MainGUI.getBackgroundColor());
					tButton.setBorder(BorderFactory.createLineBorder(Color.white,1));
					
					tButton.addActionListener(new ActionListener() {

						@Override
						public void actionPerformed(ActionEvent arg0) {

							Controlador.getInstancia().tratarPeticion(new Contexto("changePanelTienda", null));						
						}
					});
			
			tPanel.add(tButton);
			
			
			//PARTE DE ADMINISTRACION
		
			aPanel = new JPanel(new BorderLayout());
				aPanel.setPreferredSize(new Dimension(110, 120));
				aPanel.setBorder(BorderFactory.createLineBorder(MainGUI.getBackgroundColor(),4));
			
				aButton = new JButton(new ImageIcon("src/Presentacion/Icons/administracion.png"));
					aButton.setBackground(new Color(210,210,210));
					aButton.setFont(new Font("Arial", Font.BOLD, 14));
					aButton.setForeground(MainGUI.getBackgroundColor());
					aButton.setBorder(BorderFactory.createLineBorder(Color.white,1));
					aButton.addActionListener(new ActionListener() {

						@Override
						public void actionPerformed(ActionEvent arg0) {

							Controlador.getInstancia().tratarPeticion(new Contexto("changePanelAdministracion", null));						
						}
					});
				
			aPanel.add(aButton);
			
			
		westPanel.add(tPanel);
		westPanel.add(aPanel);
			
	//**************************************************************************************************************************	

		this.mainPanel.add(westPanel, BorderLayout.WEST);
		this.mainPanel.add(new JPanel(), BorderLayout.CENTER);
	
		if(this.haveConexion)
			Controlador.getInstancia().tratarPeticion(new Contexto("changeToVentas", null));

	//Si no hay acceso a la base de datos la aplicación no puede funcionar, por tanto se bloquean todos sus elementos.
	
//		else(!this.haveConexion){
	
	//		aButton.setEnabled(false);
	//		tButton.setEnabled(false);
	//		this.mainPanel.setEnabled(false);

	//		errorMessage("Fallo con la conexion a la base de datos.");
//		}//else
	
		
	this.setContentPane(mainPanel);
	this.setSize(1300, 720);
	this.setLocation(50, 50);
	this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
	this.setVisible(true);
	
	
	}//MainGUI
	

	//**************************************************************************************************************************

	
	@SuppressWarnings("unchecked")
	
	/**
	 * Actualiza la vista del Frame segun el evento recibido como parametro.
	 */
	public void actualizar(Contexto contexto) {
		
		switch(contexto.getEvento()){

			//EVENTOS AUXILIARES.
		
			case "Error":
					
				errorMessage(contexto.getDatos());
				
				break;
				
				
			//-------------------------------------------------------------------------

				
			case "changePanelTienda":
				
				tPanel.remove(tPanel.getComponentCount()-1);
				tPanel.add(new PanelTienda());	
				
				aPanel.remove(aPanel.getComponentCount()-1);
				aPanel.add(this.aButton);
				
				break;

				
			//-------------------------------------------------------------------------
	
				
			case "changePanelAdministracion":
				
				aPanel.remove(aPanel.getComponentCount()-1);
				aPanel.add(new PanelAdministracion());
				
				tPanel.remove(tPanel.getComponentCount()-1);
				tPanel.add(this.tButton);
				
				break;
				
				
			//******************************************************************************************************
			//******************************************************************************************************
					
				//PRODUCTOS
					
				case "changeToProductos":
					
					mainPanel.remove(mainPanel.getComponentCount()-1);
					
					this.lista = (ArrayList<ProductoTrans>)contexto.getDatos();
					
					mainPanel.add(new ProductosGUI((ArrayList<ProductoTrans>) this.lista),BorderLayout.CENTER);
					
					if(this.lista != null)
						((ProductosGUI)mainPanel.getComponent((mainPanel.getComponentCount()-1))).updateTable((ArrayList<ProductoTrans>) this.lista);
					
					this.setTitle("TPV - Productos");
					
					
					
					break;
					
				//-------------------------------------------------------------------------

				case "anadirProductosView":
					
					mainPanel.remove(mainPanel.getComponentCount()-1);
					
					mainPanel.add(new AnadirFrame_Productos(),BorderLayout.CENTER);
					
					this.setTitle("TPV - Productos");
					
					
					break;
		
				//-------------------------------------------------------------------------

				case "updateProductosView":
					
					this.lista = (ArrayList<Object>)contexto.getDatos();
					
					mainPanel.remove(mainPanel.getComponentCount()-1);
					
					mainPanel.add(new ActualizarFrame_Productos(Integer.parseInt(lista.get(0).toString()),//id
							
																(String)this.lista.get(1),//nombre
																
																(String)this.lista.get(2),//idProveedor
							
																this.lista.get(3).toString(),//stock
					
																this.lista.get(4).toString()),//precio
							
																BorderLayout.CENTER);
					
					this.setTitle("TPV - Productos");
					
					
					break;
					
					
					
					
			//******************************************************************************************************
			//******************************************************************************************************
		
				/*//CLIENTES
					
				case "changeToClientes":
					
					mainPanel.remove(mainPanel.getComponentCount()-1);
					
					this.lista = (ArrayList<ClientesTrans>)ob;
					
					mainPanel.add(new ClientesGUI((ArrayList<ClientesTrans>)this.lista),BorderLayout.CENTER);
					
					
					if(this.lista != null)
						((ClientesGUI)mainPanel.getComponent((mainPanel.getComponentCount()-1))).updateTable((ArrayList<ClientesTrans>)this.lista);
					
					this.setTitle("TPV - Clientes");
					
					break;
					
				//-------------------------------------------------------------------------
					
				case "changeToClientesEmpresa":
					
					mainPanel.remove(mainPanel.getComponentCount()-1);
					
					this.lista = (ArrayList<ClientesTrans>)ob;
					
					if(this.lista != null)
						for (int i = 0; i < this.lista.size(); i++){
							
							if(((ClientesTrans) this.lista.get(i)).getTipo() != 1){
								
								this.lista.remove(i);
								i--;
							}
							
						}
					
					mainPanel.add(new EmpresaGUI(this.lista.size()),BorderLayout.CENTER);
					
					if(this.lista != null)
						((EmpresaGUI)mainPanel.getComponent((mainPanel.getComponentCount()-1))).updateTable((ArrayList<ClientesTrans>)this.lista);

					
					this.setTitle("TPV - Clientes");
					
					break;
					
				//-------------------------------------------------------------------------

				case "changeToClientesParticular":
					
					mainPanel.remove(mainPanel.getComponentCount()-1);
					
					this.lista = (ArrayList<ClientesTrans>)ob;

					if(this.lista != null)	
						for (int i = 0; i < this.lista.size(); i++){
							
							if(((ClientesTrans) this.lista.get(i)).getTipo() != 0){
	
								this.lista.remove(i);
								i--;
							}
							
						}
					
					mainPanel.add(new ParticularGUI(this.lista.size()),BorderLayout.CENTER);

					if(this.lista != null)
						((ParticularGUI)mainPanel.getComponent((mainPanel.getComponentCount()-1))).updateTable((ArrayList<ClientesTrans>)this.lista);

					
					this.setTitle("TPV - Clientes");
					
					break;
					
				//-------------------------------------------------------------------------
					
				case "changeToAnadirClientes":
					
					mainPanel.remove(mainPanel.getComponentCount()-1);
					
					String type = (String)ob;
					
					if (type.equals("ClienteParticular")){
						
						mainPanel.add(new AnadirFrame_Clientes(typeCliente.PARTICULAR),BorderLayout.CENTER);
						
					}
					
					else
					
						mainPanel.add(new AnadirFrame_Clientes(typeCliente.EMPRESA),BorderLayout.CENTER);
					
					this.setTitle("TPV - Clientes");
					
					break;
					
				//-------------------------------------------------------------------------
					
				case "changeToActualizarClientes":
					
					ClientesTrans c = (ClientesTrans)ob;
					
					mainPanel.remove(mainPanel.getComponentCount()-1);

					if (c.getTipo() == 0)
					
						mainPanel.add(new ActualizarFrame_Clientes(typeCliente.PARTICULAR, c),BorderLayout.CENTER);
					
					else
						mainPanel.add(new ActualizarFrame_Clientes(typeCliente.EMPRESA, c),BorderLayout.CENTER);
					
					break;*/
					
				
		//******************************************************************************************************
		//******************************************************************************************************
				
			//VENTAS
				
			case "changeToVentas":
				
				mainPanel.remove(mainPanel.getComponentCount()-1);
				
				this.lista = (ArrayList<ProductoTrans>)contexto.getDatos();
			
				if(this.lista !=null)				
					for(int i = 0; i < lista.size(); i++){
					
						if(((ProductoTrans) lista.get(i)).getActivo() == false){
							
							this.lista.remove(i);
							i--;
						}
					}//for
				
				
				mainPanel.add(new VentasGUI((ArrayList<ProductoTrans>) lista),BorderLayout.CENTER);
				

				if(this.lista != null)
					((VentasGUI)mainPanel.getComponent((mainPanel.getComponentCount()-1))).updateTable((ArrayList<ProductoTrans>)this.lista);
				
				this.setTitle("TPV - Ventas");
				
				break;
				
			/*//-------------------------------------------------------------------------
				
			case "backToVentas":
				
				this.lista = (ArrayList<ProductosTrans>)ob;
				
				for(int i = 0; i < lista.size(); i++){
					
					if(((ProductosTrans) lista.get(i)).getActivado() == false){
						
						this.lista.remove(i);
						i--;
					}
					
				}
				
			
				((VentasGUI)mainPanel.getComponent((mainPanel.getComponentCount()-1))).addRows((ArrayList<ProductoTrans>) this.lista);
				
				((VentasGUI)mainPanel.getComponent((mainPanel.getComponentCount()-1))).updateTable((ArrayList<ProductosTrans>) this.lista);

				break;
				
			//-------------------------------------------------------------------------

				
			case "listVentasView":
				
				mainPanel.remove(mainPanel.getComponentCount()-1);
				
				this.lista = (ArrayList<VentasTrans>)ob;
				
				mainPanel.add(new ListaFrame_Ventas(lista.size()),BorderLayout.CENTER);
				
				((ListaFrame_Ventas)mainPanel.getComponent((mainPanel.getComponentCount()-1))).updateTable((ArrayList<VentasTrans>) this.lista);
				
				this.setTitle("TPV - Ventas");
				
				break;
				
				//-------------------------------------------------------------------------

				
			case "addProductoCompra":
				
				ProductosTrans p = (ProductosTrans)ob;
				
				((VentasGUI) mainPanel.getComponent(mainPanel.getComponentCount()-1)).updateTotalImport(p.getPrecio());
				
				((VentasGUI) mainPanel.getComponent(mainPanel.getComponentCount()-1)).addProducto(p);
				
				this.setTitle("TPV - Ventas");
				
				break;
				
				//-------------------------------------------------------------------------

			case "searchProductoVenta":
				
				this.lista = (ArrayList<ProductosTrans>)ob;
				
				((VentasGUI)mainPanel.getComponent((mainPanel.getComponentCount()-1))).removeRows(this.lista.size());
				
				((VentasGUI)mainPanel.getComponent((mainPanel.getComponentCount()-1))).updateTable((ArrayList<ProductosTrans>) this.lista);
				
				this.setTitle("TPV - Ventas");
				
				break;*/
				
		//******************************************************************************************************
		//******************************************************************************************************
				
			default:
			
				@SuppressWarnings("unused") 
				int dialog = JOptionPane.showOptionDialog(new JFrame(), "Se ha notifiado un evento que no existe.", "ERROR",
						JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, null, null);
				
				break;
		
		}//switch
		
		
		this.setVisible(true);
		this.repaint();
		
		
	}//update
	

	
	/**
	 * Da color de fondo uniforme a toda la aplicacion
	 * 
	 * @return
	 */
	public static Color getBackgroundColor() {
		
		return new Color(20,58,82);
		
	}//getBackgroundColor
	
	
	/**
	 * Lanza mensaje de aviso si en las tablas de los modulos queremos hacer una operacion
	 * sin haber seleccionado una fila sonre la que realizar la misma.
	 */
	public static void notSelectedRow(){
		
		@SuppressWarnings("unused")
		int dialog = JOptionPane.showOptionDialog(new JFrame(), "No se ha seleccionado ninguna fila.", null,
				JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);

	}//notSelectedRow 
	
	/**
	 * 
	 * Lanza una venta de error avisando del problema que hay
	 *  
	 * @param ob --> cadena de texto con la explicacion del problema.
	 */
	private void errorMessage(Object ob){
		
		@SuppressWarnings("unused")
		int dialog = JOptionPane.showOptionDialog(new JFrame(), ob, "ERROR",
				JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, null, null);
		
	}//errorMessage


}//MainGUI


