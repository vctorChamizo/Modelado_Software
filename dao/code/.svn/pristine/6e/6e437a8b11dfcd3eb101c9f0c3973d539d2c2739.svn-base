package Integracion.Querys;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;

import Integracion.Excepciones.ExcepcionIntegracion;
import Integracion.Transacciones.GestorTransacciones;
import Negocio.Venta.LineaVenta;

public class ClientesProductosEnFechaDeterminada implements Query {

	@Override
	public Object ejecutar(Object parametro) throws ExcepcionIntegracion {
		
		String bloqueo="FOR UPDATE";
		
		if(GestorTransacciones.getInstancia().getTransaccion()==null){
			
			GestorTransacciones.getInstancia().nuevaTransaccion();
			GestorTransacciones.getInstancia().getTransaccion().start();
			bloqueo="";
		}
		
		Connection conexion = (Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
		
		try {
						
			Date date = stringToSQLDate((String) parametro);
			
			//Con esta primera consulta sacamos a todos los clientes que han comprado en la fecha solicitada.
			PreparedStatement ps = conexion.prepareStatement("SELECT cliente.id FROM cliente"
					
															+ "	WHERE cliente.id = venta.cliente AND venta.fecha = ? " + bloqueo);
			ps.setDate(1, date);
			ResultSet rs = ps.executeQuery();
			
			ArrayList<Integer>clientes= new ArrayList<Integer>();
			HashMap<Integer, ArrayList<LineaVenta>> vnt = new HashMap<Integer, ArrayList<LineaVenta>>();
			
			//A PARTIR DE AQUI ESTA MAL:
				//EL OBJETIVO ES QUE DEVUELVA EN EL HASMAP, EL CLIENTE JUNTO CON LOS ID´s DE LOS PRODCUTOS QUE COMPRÓ ESE DIA.
				//UNA VEZ QUE HAS CONSEGUIDO EL ID DEL CLIENTE, DEBES USARLO EN LA SIGUIENTE CONSULTA PARA QUE TE DEVULVA
				//EN UNA MISMA FILA (AYUDATE DE GROUP_CONCAT PARA HACER ESTO) EL NOMBRE DEL CLIENTE JUNTO CON LOS ID´s DE
				//LOS PRODUCTOS.
			
				//COMO ESTO ES ALGO COMPLICADO, PUEDES USAR LA ESTRUCTURA DEL HASMAP QUE ESTABAS UTILIZANDO (NO LA HE TOCADO),
				//SOLO QUE POR LO QUE HE VISTO, NO PUEDES ENLAZAR ESTO POR QUE EN NINGUN MOMENTO RELACIONAS EL ID DEL CLIENTE
				//QUE HAS OBTENIDO EN LA ANTERIOR CONSULTA CON LA VENTA Y SU RESPESCTIVA LINEA_VENTA QUE QUIERES HALLAR.
			
				//CUIDADO TAMBIEN CON TODOS LOS NEWS DEL ARRAYLIST DE LINEA VENTA QUE ESTAS CREANDO DENTRO DEL BUCLE, PUEDES
				//REUTILIZAR EL MISMO UNA VEZ QUE LOS HAS INTRODUCIDO.
			
				//PARA LA SEGUNDA PUEDES HACER UNA PRUEBA DIRECTAMENTE EN LA BBDD PROBANDO CON UN ID DE CLIENTE QUE TENGA UNA 
				//COMPRA REGISTRADA Y A VER SI TE DEVUELVE SU LINEA DE VENTA.
			
			while(rs.next()) {
			
				clientes.add(rs.getInt(1));
				
				//selecionamos la linea de venta de cada uno de ellos.
				PreparedStatement ps2 = conexion.prepareStatement("SELECT linea_de_venta.venta "
																+ "FROM linea_de_venta, venta "
																+ "WHERE linea_de_venta.venta = venta.id");
				
				ResultSet prod = ps2.executeQuery();//Ejecutamos la segunda consulta
				
				ArrayList<LineaVenta> lv = new ArrayList<LineaVenta>(); //ArrayList de la linea de venta de cada cliente
				
				while(prod.next()) {
					
					lv.add(prod.getInt(1), null); //Los vamos añadiendo
				}
				
				//vnt.put(rs.getString(1), lv); //Para cada cliente(clave) añadimos su linea de venta al hashmap
				
				prod.close();
			}
			rs.close();
			
			return vnt;
				
		}
		
		catch (SQLException e) {
			
			throw new ExcepcionIntegracion("Error en la consulta");
		}
		
		finally {
			
			if(!bloqueo.equals("FOR UPDATE")){
				
				GestorTransacciones.getInstancia().getTransaccion().commit();
				GestorTransacciones.getInstancia().eliminaTransaccion();
			}	
		}
		
	}

	
	private Date stringToSQLDate(String fecha){
		
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-DD");
		java.util.Date date = null;
		
		try {
			
			date = formatter.parse(fecha);
		} 
		
		catch (ParseException e) {

			return null;
		}
		
		return new Date(date.getTime());
		
	}//stringToSQLDate

}
