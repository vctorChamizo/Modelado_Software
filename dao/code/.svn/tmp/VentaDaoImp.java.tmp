package Integracion.Venta;

<<<<<<< .mine
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
=======
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
>>>>>>> .r1186
import java.util.ArrayList;

<<<<<<< .mine

import Integracion.Excepciones.ExcepcionIntegracion;
import Integracion.Transacciones.GestorTransacciones;
import Integracion.Transacciones.Transaccion;
=======
import Integracion.Transacciones.GestorTransacciones;
import Integracion.Transacciones.Transaccion;
>>>>>>> .r1186
import Negocio.Venta.VentaTrans;

public class VentaDaoImp implements VentaDao {
<<<<<<< .mine
=======

	
	/*
	public static void main(String[] args) {
		
		Transaccion t =GestorTransacciones.getInstancia().nuevaTransaccion();
		t.start();
		VentaTrans v= new VentaTrans("1991-11-12",10,1);
		VentaDaoImp ve = new VentaDaoImp();
		int id=ve.crearVenta(v);
		t.commit();
		
		VentaTrans p=ve.buscarVentaPorId(id);
		ve.borrarVenta(p.getId());
		t.commit();
	}
	
	*/
	
	/**
	 * transforma string en java.sql.Date
	 * @param fecha
	 * @return
	 */
	private Date stringToSQLDate(String fecha)
	{
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-DD");
		java.util.Date date=null;
		try {
			date = formatter.parse(fecha);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return new Date(date.getTime());
	}
	public int crearVenta(VentaTrans venta) {
		

		Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
		try {
		java.sql.PreparedStatement ps=conexion.prepareStatement("INSERT INTO `venta`( `fecha`, `total`, `cliente`) VALUES (?,?,?)",Statement.RETURN_GENERATED_KEYS);
			
		ps.setDate(1,stringToSQLDate(venta.getFecha()));
		ps.setDouble(2, venta.getTotal());
		ps.setInt(3, venta.getIdCliente());
			
		ps.executeUpdate();
		
		ResultSet rs= ps.getGeneratedKeys();
		rs.next();
		int id = rs.getInt(1);
		ps.close();
		
		return id;
		
		} catch (SQLException e) {
			return -1;
		}
		
	}
>>>>>>> .r1186

<<<<<<< .mine
	
	
	public static void main(String[] args) {
		
		try {
			
			Transaccion t = GestorTransacciones.getInstancia().nuevaTransaccion();
			t.start();
			
			VentaTrans v = new VentaTrans("1981-11-12",10,6);
			VentaDaoImp ve = new VentaDaoImp();
			
			int id = ve.crearVenta(v);
			
			t.commit();
			
			VentaTrans p = ve.buscarVentaPorId(id);
			//ve.borrarVenta(p.getId());
			
			t.commit();
			v = new VentaTrans(8,"1777-11-12",8,7);
			
			ve.modificarVenta(v);
			t.commit();
			
			ArrayList<VentaTrans> listaVe = ve.listarVentas();
			
			t.commit();
		} 
		
		catch (ExcepcionIntegracion e) {
=======

	public VentaTrans buscarVentaPorId(int id) {
		Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
		try {
			java.sql.PreparedStatement ps=conexion.prepareStatement("SELECT * from `venta` where `venta`.`id`="+id);
			ResultSet rs=ps.executeQuery();
			
			if(rs.next()) {
			VentaTrans v= new VentaTrans(rs.getInt("id"),rs.getDate("fecha").toString(),rs.getDouble("total"),rs.getInt("cliente"));
			rs.close();
			return v;
			}
			return null;
		} catch (SQLException e) {
			
			return null;
		}
	}
>>>>>>> .r1186

<<<<<<< .mine
			e.printStackTrace();
		}
		
	}//main de prueba Venta Integracion
	
	
	
	
	/**
	 * transforma string en java.sql.Date
	 * @param fecha
	 * @return
	 * @throws ExcepcionIntegracion 
	 */
=======
	
>>>>>>> .r1186
<<<<<<< .mine
	private Date stringToSQLDate(String fecha){
		
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-DD");
		java.util.Date date=null;
		
		try {
			
			date = formatter.parse(fecha);
		} 
		
		catch (ParseException e) {

			return null;
		}
		
		return new Date(date.getTime());
		
	}//stringToSQLDate
	
	
	//************************************************************************************************************

	
	public int crearVenta(VentaTrans venta) throws ExcepcionIntegracion {
	
		int id;
		
		Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
		try {
			java.sql.PreparedStatement ps=conexion.prepareStatement("INSERT INTO `venta`( `fecha`, `total`, `cliente`) VALUES (?,?,?)",Statement.RETURN_GENERATED_KEYS);
				
			ps.setDate(1,stringToSQLDate(venta.getFecha()));
			ps.setDouble(2, venta.getTotal());
			ps.setInt(3, venta.getIdCliente());
				
			ps.executeUpdate();
			
			ResultSet rs= ps.getGeneratedKeys();
			rs.next();
			id = rs.getInt(1);
			
			ps.close();
		} 
		
		catch (SQLException e) {
			
			throw new ExcepcionIntegracion("Error al crear la venta.");
		}
		
		return id;
		
=======
	public void borrarVenta(int id) {
		Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
		try {
		java.sql.PreparedStatement ps=conexion.prepareStatement("DELETE FROM `venta` WHERE `venta`.`id` = "+id);
			ps.executeUpdate();
			ps.close();
			
		} catch (SQLException e) {
			
		}
		
>>>>>>> .r1186
	}

<<<<<<< .mine
=======

	public void modificarVenta(VentaTrans id) {
		// begin-user-code
		// TODO Apéndice de método generado automáticamente
>>>>>>> .r1186

	//************************************************************************************************************

<<<<<<< .mine
	
	public VentaTrans buscarVentaPorId(int id) throws ExcepcionIntegracion {
		
		Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
		
		try {
			
			java.sql.PreparedStatement ps=conexion.prepareStatement("SELECT * from `venta` where `venta`.`id`=?");
			ps.setInt(1, id);
			ResultSet rs=ps.executeQuery();
			
			if(rs.next()){
				VentaTrans v= new VentaTrans(rs.getInt("id"),rs.getDate("fecha").toString(),rs.getDouble("total"),rs.getInt("cliente"));
				rs.close();
				return v;
			}
		} 
		
		catch (SQLException e) {
			
			throw new ExcepcionIntegracion("Error al buscar la venta.");

		}
		
=======

	public ArrayList<VentaTrans> listarVentas() {
		// begin-user-code
		// TODO Apéndice de método generado automáticamente
>>>>>>> .r1186
		return null;
		
	}//bucarVentaPorId

	
	//************************************************************************************************************

	
	public void borrarVenta(int id) throws ExcepcionIntegracion {
		
		Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
		
		try {
			
			PreparedStatement ps=conexion.prepareStatement("DELETE FROM `venta` WHERE `venta`.`id` =?");
			ps.setInt(1, id);	
			ps.executeUpdate();
			ps.close();
		} 
		
		catch (SQLException e) {
			
			throw new ExcepcionIntegracion("Error al buscar la venta.");
		}
		
	}

	
	//************************************************************************************************************

	
	public void modificarVenta(VentaTrans venta) throws ExcepcionIntegracion {
		
		Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
		
		PreparedStatement ps;
		
		try{
			
			
			//TESTEADA A FALTA DE AÑADIR EL CAMPO ACTIVO A VENTA TRANS Y A LA BBDD.
			ps = conexion.prepareStatement("UPDATE venta SET fecha = ?, total = ?, cliente = ? WHERE id = ?");

			ps.setDate(1, stringToSQLDate(venta.getFecha()));
			ps.setDouble(2, venta.getTotal());
			ps.setInt(3, venta.getIdCliente());
			ps.setInt(4, venta.getId());
				
			ps.executeUpdate();
			ps.close();			
		}
		
		catch(SQLException e){
			
			throw new ExcepcionIntegracion("Error al modificar la venta.");

		}
	
	}//modificarVenta

	
	//************************************************************************************************************

	
	public ArrayList<VentaTrans> listarVentas() throws ExcepcionIntegracion {

		Connection conexion=(Connection) GestorTransacciones.getInstancia().getTransaccion().getResource();
		
		ArrayList<VentaTrans> lista = new ArrayList<VentaTrans>();
		
		VentaTrans venta;
		
		PreparedStatement ps;
		
		try{
			
			ps = conexion.prepareStatement("SELECT * FROM venta ORDER BY fecha FOR UPDATE");
			
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()){
				
				venta = new VentaTrans(rs.getInt("id"), rs.getString("fecha"), 
						rs.getInt("total"), rs.getInt("cliente"));
				
				lista.add(venta);
				
			}
			
			ps.close();
		}
		
		catch(SQLException e){
			
			throw new ExcepcionIntegracion("Error al listar las ventas.");

		}
		
		return lista;
		
		
	}//listarVentas
	
	
	
}//VentaDAOImp


